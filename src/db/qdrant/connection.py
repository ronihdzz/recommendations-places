from typing import Optional
import time
from qdrant_client import QdrantClient
from qdrant_client.models import Distance, VectorParams, PointStruct
from qdrant_client.http.exceptions import UnexpectedResponse
from loguru import logger
from core.settings import settings


class QdrantConnection:
    """Clase para manejar la conexi√≥n con Qdrant"""
    
    def __init__(self, url: str = None):
        """
        Inicializa la conexi√≥n con Qdrant
        
        Args:
            url: URL completa de Qdrant (usa settings por defecto)
        """
        self.url = url or settings.QDRANT_URL
        self._client: Optional[QdrantClient] = None
        
        # Log de configuraci√≥n inicial
        logger.info(f"üîß Configurando conexi√≥n Qdrant:")
        logger.info(f"   üìç URL: {self.url}")
        logger.info(f"   üîë API Key configurada: {'S√≠' if settings.QDRANT_API_KEY else 'No'}")
    
    @property
    def client(self) -> QdrantClient:
        """Obtiene el cliente de Qdrant, cre√°ndolo si es necesario"""
        if self._client is None:
            logger.info(f"üîå Intentando establecer conexi√≥n con Qdrant...")
            try:
                self._client = QdrantClient(url=self.url, api_key=settings.QDRANT_API_KEY)
                
                # Verificar la conexi√≥n inmediatamente
                start_time = time.time()
                self._client.get_collections()
                connection_time = time.time() - start_time
                
                logger.success(f"‚úÖ Conexi√≥n con Qdrant establecida exitosamente en {self.url}")
                logger.info(f"‚è±Ô∏è  Tiempo de conexi√≥n: {connection_time:.2f}s")
                
            except ConnectionError as e:
                logger.error(f"üö´ Error de conexi√≥n con Qdrant:")
                logger.error(f"   üìç URL intentada: {self.url}")
                logger.error(f"   üî• Error: {type(e).__name__}: {e}")
                logger.error(f"   üí° Soluci√≥n: Verifica que Qdrant est√© ejecut√°ndose en {self.url}")
                logger.error(f"   üê≥ Docker: docker-compose up qdrant")
                raise
                
            except UnexpectedResponse as e:
                logger.error(f"üö´ Respuesta inesperada de Qdrant:")
                logger.error(f"   üìç URL: {self.url}")
                logger.error(f"   üìÑ Status: {getattr(e, 'status_code', 'N/A')}")
                logger.error(f"   üìù Contenido: {getattr(e, 'content', 'N/A')}")
                logger.error(f"   üí° Verifica la configuraci√≥n de Qdrant")
                raise
                
            except Exception as e:
                logger.error(f"üö´ Error inesperado conectando con Qdrant:")
                logger.error(f"   üìç URL: {self.url}")
                logger.error(f"   üî• Tipo: {type(e).__name__}")
                logger.error(f"   üìù Error: {e}")
                logger.error(f"   üîç Verifica logs de Qdrant para m√°s detalles")
                raise
                
        return self._client
    
    def close(self):
        """Cierra la conexi√≥n con Qdrant"""
        if self._client:
            try:
                self._client.close()
                self._client = None
                logger.info("üîå Conexi√≥n con Qdrant cerrada exitosamente")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Error al cerrar conexi√≥n con Qdrant: {e}")
    
    def is_connected(self) -> bool:
        """Verifica si la conexi√≥n con Qdrant est√° activa"""
        if self._client is None:
            logger.debug("üîç Cliente Qdrant no inicializado")
            return False
            
        try:
            start_time = time.time()
            collections = self.client.get_collections()
            check_time = time.time() - start_time
            
            logger.debug(f"‚úÖ Verificaci√≥n de conexi√≥n exitosa ({check_time:.2f}s)")
            logger.debug(f"üìä Colecciones disponibles: {len(collections.collections)}")
            return True
            
        except ConnectionError as e:
            logger.error(f"üö´ Qdrant no est√° disponible:")
            logger.error(f"   üìç URL: {self.url}")
            logger.error(f"   üî• Error: {e}")
            logger.error(f"   üí° Verifica que Qdrant est√© ejecut√°ndose")
            return False
            
        except Exception as e:
            logger.error(f"üö´ Error verificando conexi√≥n con Qdrant:")
            logger.error(f"   üìç URL: {self.url}")
            logger.error(f"   üî• Tipo: {type(e).__name__}")
            logger.error(f"   üìù Error: {e}")
            return False

    def health_check(self) -> dict:
        """Realiza un chequeo completo de salud de Qdrant"""
        logger.info("üè• Iniciando chequeo de salud de Qdrant...")
        
        health_status = {
            "connected": False,
            "url": self.url,
            "collections_count": 0,
            "response_time": None,
            "error": None
        }
        
        try:
            start_time = time.time()
            
            # Verificar conexi√≥n
            collections = self.client.get_collections()
            response_time = time.time() - start_time
            
            health_status.update({
                "connected": True,
                "collections_count": len(collections.collections),
                "response_time": round(response_time, 3)
            })
            
            logger.success("‚úÖ Qdrant est√° funcionando correctamente")
            logger.info(f"   ‚è±Ô∏è  Tiempo de respuesta: {response_time:.3f}s")
            logger.info(f"   üìä Colecciones: {len(collections.collections)}")
            
        except Exception as e:
            health_status["error"] = str(e)
            logger.error(f"‚ùå Chequeo de salud fall√≥: {e}")
            
        return health_status


# Instancia global de conexi√≥n
qdrant_connection = QdrantConnection()


def get_qdrant_client() -> QdrantClient:
    """Obtiene el cliente de Qdrant"""
    return qdrant_connection.client


def close_qdrant_connection():
    """Cierra la conexi√≥n global con Qdrant"""
    qdrant_connection.close()


def qdrant_health_check() -> dict:
    """Funci√≥n de conveniencia para chequeo de salud"""
    return qdrant_connection.health_check() 